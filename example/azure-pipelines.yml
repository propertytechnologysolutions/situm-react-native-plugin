# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pr: none

parameters:
  - name: system
    type: string
    values:
      - "ubuntu-latest"        
      - "macOS-12"
  - name: XAPIEMAIL
    type: string
    displayName: X-API-EMAIL
  - name: XAPIKEY
    type: string
    displayName: X-API-KEY
  - name: BUILDINGID
    type: string
  - name: FLOORID
    type: string
  - name: DASHBOARD_URL
    type: string
    values:
      - "https://dashboard.situm.com"
      - "https://pre.situm.com"
      - "https://des.situm.com"
    default: "https://dashboard.situm.com"

variables:
  - group: Passwords
  - group: SoftwareVersions

resources:
  repositories:
  - repository: sys_kubernetes_templates
    type: bitbucket
    endpoint: Bitbucket - sistemas
    name: situm/sys-kubernetes-templates.git

jobs: 
- job:
  displayName: Build ${{ parameters.system }}
  pool:
    vmImage: ${{ parameters.system }}
  steps:
  - checkout: self
    fetchDepth: 1
    fetchTags: false
    displayName: Clone repository

  - task: NodeTool@0
    inputs:
      versionSource: 'spec' # 'spec' | 'fromFile'. Required. Source of version. Default: spec.
      versionSpec: $(nodeVersion)

  - bash: |

      echo -e "\n[+] Installing NPM version $(npmVersion)\n"
      npm install -g $(npmVersion)


      echo -e "\n[+] Install plugin dependencies\n"
      npm install

      echo -e "\n[+] Install example dependencies\n"
      cd example
      npm install

    displayName: Install plugin dependencies

  - bash: |

      if [[ "${{ parameters.system }}" == *"macOS-"* ]];then
          echo -e "\n[+] Install gnu-sed\n"
          brew install gnu-sed
          export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
      fi

      pluginVersion=$(grep version package.json | awk -F"\"" '{print $4}')
      echo "##vso[task.setvariable variable=pluginVersion]$(echo $pluginVersion)"

      echo -e "\n[+] Variables to set:"
      echo -e "\t[+] X-API-EMAIL: ${{ parameters.XAPIEMAIL }}"
      echo -e "\t[+] BUILDINGID: ${{ parameters.BUILDINGID }}"
      echo -e "\t[+] FLOORID: ${{ parameters.FLOORID }}"
      echo -e "\t[+] DASHBOARD_URL: ${{ parameters.DASHBOARD_URL }}"
      echo -e "\t[+] Plugin Version used: $pluginVersion"

      echo "export const SITUM_EMAIL = '${{ parameters.XAPIEMAIL }}';" > example/src/situm.tsx
      echo "export const SITUM_API_KEY = '${{ parameters.XAPIKEY }}';" >> example/src/situm.tsx
      echo "export const SITUM_BUILDING_ID = '${{ parameters.BUILDINGID }}';" >> example/src/situm.tsx
      echo "export const SITUM_FLOOR_ID = '${{ parameters.FLOORID }}';" >> example/src/situm.tsx
      echo "export const SITUM_DASHBOARD_URL = '${{ parameters.DASHBOARD_URL }}';"  >> example/src/situm.tsx
      
      sed -i "s/HERE_GOES_GOOGLE_MAPS_API_KEY/$(MAPS_APIKEY_EXAMPLE)/" example/ios/example/AppDelegate.mm
      sed -i "s/HERE_GOES_GOOGLE_MAPS_API_KEY/$(MAPS_APIKEY_EXAMPLE)/" example/android/app/src/main/AndroidManifest.xml

    displayName: Configure credentials
  
  - ${{ if contains(parameters.system, 'macOS') }}:

    - task: DownloadSecureFile@1
      name: api_key
      inputs:
        secureFile: api_key.json

    - task: InstallAppleCertificate@2
      inputs:
        certSecureFile: AppleCert23.p12
        
    - task: InstallAppleCertificate@2
      inputs:
        certSecureFile: DistributorWildcard.p12
  
    - task: InstallAppleProvisioningProfile@1
      inputs:
        provisioningProfileLocation: 'secureFiles'
        provProfileSecureFile: RNSDKExample.mobileprovision
        removeProfile: true
    
    - task: InstallAppleProvisioningProfile@1
      inputs:
        provisioningProfileLocation: 'secureFiles'
        provProfileSecureFile: DistributorOnline.mobileprovision
        removeProfile: true
  
    - bash: |
        echo -e "\n[+] Install iOS example dependencies\n"
        cd example/ios
        pod install
      displayName: Install iOS example dependencies

    - bash: |

        echo -e "\n[+] Selecting the Xcode version $(xcodeVersion)\n"

        sudo xcode-select -switch $(xcodeVersion)

        cd example/ios/fastlane

        echo -e "\n[+] Setting Apple connection options"

        cp $(api_key.secureFilePath) .

        echo -e "\n[+] Install fastlane \n"
        gem install fastlane

        dashboard=$(echo ${{ parameters.DASHBOARD_URL }} | awk -F"/" '{print $3}')  
        export WHATS_NEW="Plugin version: $(pluginVersion), USER: ${{parameters.XAPIEMAIL}}, BUILDINGID: ${{ parameters.BUILDINGID }}, DASHBOARD_URL: $dashboard"
        echo -e "\n[+] Setting variables to deploy:"
        echo -e "\t[+] Set WHATS_NEW: $WHATS_NEW"


        echo -e "\n[+] Build example with fastlane \n"
        fastlane ios beta

      displayName: Build iOS example 
  
  
  - ${{ if contains(parameters.system, 'ubuntu') }}:

    - bash: |
        echo -e "\n[+] Build Android example \n"

        cd example

        mkdir -p android/app/src/main/assets 
        
        npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res

        cd android

        ./gradlew assembleDebug
        
      displayName: Build Android dependencies


    - bash: |
        folder="/Documentos%20compartidos/Desarrollo/Apks/RNSDK"
        branchName=$(echo $(Build.SourceBranch)| cut -d "/" -f 3,4 | sed 's/\//_/g')
        branchFolder="$folder/$branchName"
        destinationFolder="$branchFolder/$(pluginVersion)"

        echo -e "\n[+] Variables to Sharepoint Upload:"
        echo -e "\t[+] Folder: $folder"
        echo -e "\t[+] Branch Name: $branchName"
        echo -e "\t[+] Branch folder: $branchFolder" 
        echo -e "\t[+] Destination folder: $destinationFolder" 
        echo -e "\t[+] Plugin Version: $(pluginVersion)"


        echo -e "\n[+] Install $(office365Cli) cli\n"

        npm i -g $(office365Cli)

        echo -e "\n[+] Login in Sharepoint \n"
        m365 login --authType password --userName $(sharepoint_user)  --password $(sharepoint_pass)

        echo -e "\n[+] Create Branch folder $branchFolder\n"
        m365 spo folder add -p $folder -u https://sistemassitum.sharepoint.com/sites/producteng --name $branchFolder

        echo -e "\n[+] Create Destination folder $destinationFolder\n"
        m365 spo folder add -p $branchFolder -u https://sistemassitum.sharepoint.com/sites/producteng --name $(pluginVersion)

        echo -e "\n[+] Upload APK to $destinationFolder\n"
        cd example/android/app/build/outputs/apk/debug
        mv app-debug.apk app-$(pluginVersion)-debug.apk
        m365 spo file add -p app-$(pluginVersion)-debug.apk -u https://sistemassitum.sharepoint.com/sites/producteng -f $destinationFolder

      displayName: Upload APK
